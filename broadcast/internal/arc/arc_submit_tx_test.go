package arc

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"github.com/rs/zerolog"
	"io"
	"net/http"
	"testing"

	"github.com/libsv/go-bc"
	"github.com/stretchr/testify/assert"

	"github.com/bitcoin-sv/go-broadcast-client/broadcast"
	"github.com/bitcoin-sv/go-broadcast-client/broadcast/broadcast-client-mock/fixtures"
	"github.com/bitcoin-sv/go-broadcast-client/httpclient"
)

func TestSubmitTransaction(t *testing.T) {
	testCases := []struct {
		name           string
		transaction    *broadcast.Transaction
		httpResponse   *http.Response
		httpError      error
		expectedResult *broadcast.SubmitTxResponse
		expectedError  error
	}{
		{
			name: "successful request",
			transaction: &broadcast.Transaction{
				Hex: "abc123",
			},
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
                    {
                        "txStatus": "CONFIRMED"
                    }
                    `)),
			},
			expectedResult: &broadcast.SubmitTxResponse{
				BaseResponse: broadcast.BaseResponse{Miner: "http://example.com"},
				SubmittedTx: &broadcast.SubmittedTx{
					BaseSubmitTxResponse: broadcast.BaseSubmitTxResponse{
						BaseTxResponse: broadcast.BaseTxResponse{
							TxStatus: broadcast.Confirmed,
						},
					},
				},
			},
		},
		{
			name: "error in HTTP request",
			transaction: &broadcast.Transaction{
				Hex: "abc123",
			},
			httpError:     errors.New("some error"),
			expectedError: errors.New("some error"),
		},
		{
			name: "missing txStatus in response",
			transaction: &broadcast.Transaction{
				Hex: "abc123",
			},
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
                    {
                        "dummyField": "dummyValue"
                    }
                    `)),
			},
			expectedError: broadcast.ErrMissingStatus,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			mockHttpClient := new(MockHttpClient)
			testLogger := zerolog.Nop()

			client := &ArcClient{
				HTTPClient: mockHttpClient,
				apiURL:     "http://example.com",
				token:      "someToken",
				Logger:     &testLogger,
			}

			body, _ := createSubmitTxBody(client, tc.transaction, broadcast.EfFormat)
			expectedPayload := httpclient.NewPayload(
				httpclient.POST,
				"http://example.com"+arcSubmitTxRoute,
				"someToken",
				body,
			)
			appendSubmitTxHeaders(&expectedPayload, nil)

			mockHttpClient.On("DoRequest", context.Background(), expectedPayload).
				Return(tc.httpResponse, tc.httpError).Once()

			// when
			result, err := client.SubmitTransaction(context.Background(), tc.transaction)

			// then
			assert.Equal(t, tc.expectedResult, result)
			assert.Equal(t, tc.expectedError, err)

			// assert Expectations on the mock
			mockHttpClient.AssertExpectations(t)
		})
	}
}

func TestConvertTransaction(t *testing.T) {
	testCases := []struct {
		name           string
		transaction    *broadcast.Transaction
		httpResponse   *http.Response
		httpError      error
		expectedResult *SubmitTxRequest
	}{
		{
			name: "successful conversion from RawTx to EF",
			transaction: &broadcast.Transaction{
				Hex: "0100000001d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffff0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
			},
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
                    {
						"transaction": ""
                    }
                    `)),
			},
			expectedResult: &SubmitTxRequest{
				RawTx: "010000000000000000ef01d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffffbc020000000000001976a914a5127a45f084089fc1ff33012c3da3dfbc0fc7db88ac0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			mockHttpClient := new(MockHttpClient)
			expectedPayload := httpclient.NewPayload(
				httpclient.GET,
				"https://junglebus.gorillapool.io/v1/transaction/get/ab24e36bda67e24f05c5b40436910f2a4d9c5663d521fea3c0308b207b60d1d6",
				"",
				nil,
			)

			mockHttpClient.On("DoRequest", context.Background(), expectedPayload).
				Return(tc.httpResponse, tc.httpError).Once()

			client := &ArcClient{
				HTTPClient: mockHttpClient,
				apiURL:     "http://example.com",
				token:      "someToken",
			}

			// when
			result, err := formatTxRequest(client, tc.transaction, broadcast.RawTxFormat)

			// then
			assert.NoError(t, err)
			assert.Equal(t, tc.expectedResult, result)
		})
	}
}

func TestConvertBatchTransactions(t *testing.T) {
	testCases := []struct {
		name            string
		transactions    []*broadcast.Transaction
		httpResponses   []*http.Response
		httpError       error
		expectedResults []*SubmitTxRequest
	}{
		{
			name: "successful batch conversion from RawTx to EF",
			transactions: []*broadcast.Transaction{
				{
					Hex: "0100000001d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffff0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
				},
				{
					Hex: "0100000001d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffff0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
				},
			},
			httpResponses: []*http.Response{
				{
					StatusCode: http.StatusOK,
					Body: io.NopCloser(bytes.NewBufferString(`
                    {
						"transaction": ""
                    }
                    `)),
				},
				{
					StatusCode: http.StatusOK,
					Body: io.NopCloser(bytes.NewBufferString(`
                    {
						"transaction": ""
                    }
                    `)),
				},
			},
			expectedResults: []*SubmitTxRequest{
				{
					RawTx: "010000000000000000ef01d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffffbc020000000000001976a914a5127a45f084089fc1ff33012c3da3dfbc0fc7db88ac0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
				},
				{
					RawTx: "010000000000000000ef01d6d1607b208b30c0a3fe21d563569c4d2a0f913604b4c5054fe267da6be324ab220000006b4830450221009a965dcd5d42983090a63cfd761038ff8adcea621c46a68a205f326292a95383022061b8d858f366c69f3ebd30a60ccafe36faca4e242ac3d2edd3bf63b669bcf23b4121034e871e147aa4a3e2f1665eaf76cf9264d089b6a91702af92bd6ce33bac84a765ffffffffbc020000000000001976a914a5127a45f084089fc1ff33012c3da3dfbc0fc7db88ac0123020000000000001976a914d8819a7197d3e221e15f4348203fdecfd29fa2b888ac00000000",
				},
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			mockHttpClient := new(MockHttpClient)
			expectedPayload := httpclient.NewPayload(
				httpclient.GET,
				"https://junglebus.gorillapool.io/v1/transaction/get/ab24e36bda67e24f05c5b40436910f2a4d9c5663d521fea3c0308b207b60d1d6",
				"",
				nil,
			)

			for _, resp := range tc.httpResponses {
				mockHttpClient.On("DoRequest", context.Background(), expectedPayload).
					Return(resp, tc.httpError).Once()
			}

			client := &ArcClient{
				HTTPClient: mockHttpClient,
				apiURL:     "http://example.com",
				token:      "someToken",
			}

			// when
			results := make([]*SubmitTxRequest, 0, len(tc.transactions))
			errors := make([]error, 0)
			for _, tx := range tc.transactions {
				requestTx, err := formatTxRequest(client, tx, broadcast.RawTxFormat)
				if err != nil {
					errors = append(errors, err)
				}
				results = append(results, requestTx)
			}

			// then
			assert.Empty(t, errors)
			assert.Equal(t, tc.expectedResults, results)
		})
	}
}

func TestDecodeSubmitResponseBody(t *testing.T) {
	mp, _ := bc.NewMerklePathFromStr(fixtures.TxMerklePath)
	testCases := []struct {
		name           string
		httpResponse   *http.Response
		expectedResult *broadcast.SubmittedTx
	}{
		{
			name: "successful decode",
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body:       io.NopCloser(bytes.NewBufferString(fmt.Sprintf("{\"merklePath\":\"%s\"}", fixtures.TxMerklePath))),
			},
			expectedResult: &broadcast.SubmittedTx{
				BaseSubmitTxResponse: broadcast.BaseSubmitTxResponse{
					BaseTxResponse: broadcast.BaseTxResponse{
						MerklePath: fixtures.TxMerklePath,
					},
				},
				MerklePath: mp,
			},
		},
		{
			name: "empty merkle path",
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
					{
						"merklePath": ""
					}
					`)),
			},
			expectedResult: &broadcast.SubmittedTx{
				MerklePath: nil,
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// when
			model, err := decodeSubmitResponseBody(tc.httpResponse)

			// then
			assert.NoError(t, err)
			assert.Equal(t, tc.expectedResult, model)
		})
	}
}

func TestSubmitBatchTransactions(t *testing.T) {
	testCases := []struct {
		name           string
		transactions   []*broadcast.Transaction
		httpResponse   *http.Response
		httpError      error
		expectedResult *broadcast.SubmitBatchTxResponse
		expectedError  error
	}{
		{
			name: "successful request",
			transactions: []*broadcast.Transaction{
				{Hex: "abc123"},
				{Hex: "cba321"},
			},
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
					[
						{
							"txStatus": "CONFIRMED"
						},
						{
							"txStatus": "CONFIRMED"
						}
					]`)),
			},
			expectedResult: &broadcast.SubmitBatchTxResponse{
				BaseResponse: broadcast.BaseResponse{Miner: "http://example.com"},
				Transactions: []*broadcast.SubmittedTx{
					{
						BaseSubmitTxResponse: broadcast.BaseSubmitTxResponse{
							BaseTxResponse: broadcast.BaseTxResponse{
								TxStatus: broadcast.Confirmed,
							},
						},
					},
					{
						BaseSubmitTxResponse: broadcast.BaseSubmitTxResponse{
							BaseTxResponse: broadcast.BaseTxResponse{
								TxStatus: broadcast.Confirmed,
							},
						},
					},
				},
			},
		},
		{
			name: "error in HTTP request",
			transactions: []*broadcast.Transaction{
				{Hex: "abc123"},
				{Hex: "cba321"},
			},
			httpError:     errors.New("some error"),
			expectedError: errors.New("some error"),
		},
		{
			name: "missing txStatus in response",
			transactions: []*broadcast.Transaction{
				{Hex: "abc123"},
				{Hex: "cba321"},
			},
			httpResponse: &http.Response{
				StatusCode: http.StatusOK,
				Body: io.NopCloser(bytes.NewBufferString(`
					[
						{
							"dummyField": "dummyValue"
						},
						{
							"txStatus": "CONFIRMED"
						}
					]`)),
			},
			expectedError: broadcast.ErrMissingStatus,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// given
			mockHttpClient := new(MockHttpClient)
			testLogger := zerolog.Nop()

			client := &ArcClient{
				HTTPClient: mockHttpClient,
				apiURL:     "http://example.com",
				token:      "someToken",
				Logger:     &testLogger,
			}

			body, _ := createSubmitBatchTxsBody(client, tc.transactions, broadcast.EfFormat)
			expectedPayload := httpclient.NewPayload(
				httpclient.POST,
				"http://example.com"+arcSubmitBatchTxsRoute,
				"someToken",
				body,
			)
			appendSubmitTxHeaders(&expectedPayload, nil)

			mockHttpClient.On("DoRequest", context.Background(), expectedPayload).
				Return(tc.httpResponse, tc.httpError).Once()

			// when
			result, err := client.SubmitBatchTransactions(context.Background(), tc.transactions)

			// then
			assert.Equal(t, tc.expectedResult, result)
			assert.Equal(t, tc.expectedError, err)

			// assert Expectations on the mock
			mockHttpClient.AssertExpectations(t)
		})
	}
}
